{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Silvia\\\\Desktop\\\\Pr\\xE1cticas Typescript\\\\ejercicios\\\\src\\\\examples\\\\StateHooksComponent.tsx\";\nimport React, { useEffect } from 'react';\nimport 'antd/dist/antd.css';\nimport { Form, Input, Button, Row, Col } from \"antd\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { RootDispatcher } from '../Store/root-reducer';\n\nconst StateHooksComponent = ({}) => {\n  const {\n    name,\n    address\n  } = useSelector(state => {\n    return {\n      name: state.name,\n      address: state.address\n    };\n  });\n  const dispatch = useDispatch();\n  const rootDispatcher = new RootDispatcher(dispatch);\n  useEffect(() => {\n    console.log('Component mounted');\n    return () => {\n      console.log('Component will be unmount');\n    };\n  }, []);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, \"State Hooks component\"), /*#__PURE__*/React.createElement(Row, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Col, {\n    span: 12,\n    offset: 6,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(Form, {\n    layout: \"inline\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Form.Item, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 17\n    }\n  }, /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"name\",\n    value: name,\n    onChange: e => {\n      rootDispatcher.updateName(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Input, {\n    type: \"text\",\n    placeholder: \"address\",\n    value: address,\n    onChange: e => {\n      rootDispatcher.updateAddress(e.target.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 21\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    htmlType: \"submit\",\n    type: \"primary\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 21\n    }\n  }, \"Submit\"))))));\n};\n\nexport default StateHooksComponent;","map":{"version":3,"sources":["C:/Users/Silvia/Desktop/Pr√°cticas Typescript/ejercicios/src/examples/StateHooksComponent.tsx"],"names":["React","useEffect","Form","Input","Button","Row","Col","useDispatch","useSelector","RootDispatcher","StateHooksComponent","name","address","state","dispatch","rootDispatcher","console","log","e","updateName","target","value","updateAddress"],"mappings":";AAAA,OAAOA,KAAP,IAAkDC,SAAlD,QAAmE,OAAnE;AACA,OAAO,oBAAP;AACA,SAAQC,IAAR,EAAcC,KAAd,EAAqBC,MAArB,EAA6BC,GAA7B,EAAkCC,GAAlC,QAA4C,MAA5C;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAAsBC,cAAtB,QAA2C,uBAA3C;;AAYA,MAAMC,mBAAoC,GAAG,CAAC,EAAD,KAAQ;AAEjD,QAAM;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAkBJ,WAAW,CAA4BK,KAAD,IAAyB;AACnF,WAAO;AACHF,MAAAA,IAAI,EAAEE,KAAK,CAACF,IADT;AAEHC,MAAAA,OAAO,EAAEC,KAAK,CAACD;AAFZ,KAAP;AAIH,GALkC,CAAnC;AAOA,QAAME,QAAQ,GAAGP,WAAW,EAA5B;AACA,QAAMQ,cAAc,GAAG,IAAIN,cAAJ,CAAmBK,QAAnB,CAAvB;AAEAb,EAAAA,SAAS,CAAC,MAAM;AACZe,IAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ;AACA,WAAO,MAAM;AACTD,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACH,KAFD;AAGH,GALQ,EAKN,EALM,CAAT;AAQA,sBACI,uDACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BADA,eAEA,oBAAC,GAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,GAAD;AAAK,IAAA,IAAI,EAAE,EAAX;AAAe,IAAA,MAAM,EAAE,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,IAAD;AAAM,IAAA,MAAM,EAAC,QAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACA,oBAAC,IAAD,CAAM,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACI,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,MAAZ;AAAmB,IAAA,WAAW,EAAC,MAA/B;AAAsC,IAAA,KAAK,EAAEN,IAA7C;AAAmD,IAAA,QAAQ,EAAGO,CAAD,IAAqC;AAC9FH,MAAAA,cAAc,CAACI,UAAf,CAA0BD,CAAC,CAACE,MAAF,CAASC,KAAnC;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAII,oBAAC,KAAD;AAAQ,IAAA,IAAI,EAAC,MAAb;AAAoB,IAAA,WAAW,EAAC,SAAhC;AAA0C,IAAA,KAAK,EAAET,OAAjD;AAA0D,IAAA,QAAQ,EAAGM,CAAD,IAAqC;AACrGH,MAAAA,cAAc,CAACO,aAAf,CAA6BJ,CAAC,CAACE,MAAF,CAASC,KAAtC;AACH,KAFD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAJJ,eAOI,oBAAC,MAAD;AAAQ,IAAA,QAAQ,EAAC,QAAjB;AAA0B,IAAA,IAAI,EAAC,SAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,CADA,CADJ,CADJ,CAFA,CADJ;AAqBH,CAzCD;;AA2CA,eAAeX,mBAAf","sourcesContent":["import React, { useState, FormEvent, ChangeEvent, useEffect } from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport {Form, Input, Button, Row, Col} from \"antd\";\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport {InitialState, RootDispatcher} from '../Store/root-reducer';\r\n\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\ninterface StateProps {\r\n    name: string;\r\n    address: string;\r\n}\r\n\r\nconst StateHooksComponent: React.FC<Props> = ({}) => {\r\n\r\n    const {name, address} = useSelector<InitialState, StateProps>((state: InitialState) => {\r\n        return {\r\n            name: state.name,\r\n            address: state.address\r\n        }\r\n    });\r\n\r\n    const dispatch = useDispatch();\r\n    const rootDispatcher = new RootDispatcher(dispatch);\r\n\r\n    useEffect(() => {\r\n        console.log('Component mounted');\r\n        return () => {\r\n            console.log('Component will be unmount')\r\n        }\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <>\r\n        <h2>State Hooks component</h2>\r\n        <Row>\r\n            <Col span={12} offset={6}>\r\n                <Form layout=\"inline\">\r\n                <Form.Item>\r\n                    <Input type=\"text\" placeholder=\"name\" value={name} onChange={(e:ChangeEvent<HTMLInputElement>) => {\r\n                        rootDispatcher.updateName(e.target.value)\r\n                    }} /> \r\n                    <Input  type=\"text\" placeholder=\"address\" value={address} onChange={(e:ChangeEvent<HTMLInputElement>) => {\r\n                        rootDispatcher.updateAddress(e.target.value)\r\n                    }}/>\r\n                    <Button htmlType=\"submit\" type=\"primary\">Submit</Button>\r\n                </Form.Item>\r\n                </Form>\r\n            </Col>\r\n        </Row>\r\n        </>\r\n        \r\n    )\r\n}\r\n\r\nexport default StateHooksComponent;"]},"metadata":{},"sourceType":"module"}